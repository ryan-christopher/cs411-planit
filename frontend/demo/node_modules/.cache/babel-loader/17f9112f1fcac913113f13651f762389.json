{"ast":null,"code":"var _jsxFileName = \"/Users/jaydenfont/Desktop/Code/School/cs411-project/frontend/demo/src/App.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from 'react';\nimport { CgArrowLongDownR } from 'react-icons/cg';\nimport './App.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar axios = require(\"axios\");\n\nconst App = () => {\n  _s();\n\n  const [lat, setLat] = useState(null);\n  const [lng, setLng] = useState(null);\n  const [status, setStatus] = useState(null);\n  const [MBTAInput, setMBTAInput] = useState(\"\");\n  const [MBTALine, setMBTALine] = useState(null);\n  const [invalidLine, setInvalidLine] = useState(null);\n\n  const getLocation = () => {\n    if (!navigator.geolocation) {\n      setStatus('Geolocation is not supported by your browser');\n    } else {\n      navigator.geolocation.getCurrentPosition(position => {\n        setStatus(null);\n        setLat(position.coords.latitude);\n        setLng(position.coords.longitude);\n      }, () => {\n        setStatus('Unable to retrieve your location');\n        var pic = document.getElementById(\"response\");\n        pic.innerHTML = '<img class=\"sad-response\" src=\"sad-face.png\"/>';\n      });\n    }\n  }; // Takes in MBTAInput from state and POSTs to flask backend\n\n\n  const getLineData = () => {\n    var data = JSON.stringify({\n      \"line\": MBTAInput\n    });\n    axios({\n      method: \"post\",\n      url: \"http://127.0.0.1:5000/get_trains_by_line\",\n      data: data,\n      headers: {\n        'Content-Type': 'application/json'\n      }\n    }).then(function (response) {\n      if (\"errors\" in Object.keys(response.data['response'])) {\n        return;\n      }\n\n      setMBTALine(response.data['response']);\n      setInvalidLine(null);\n      console.log(MBTALine);\n    }).then(console.log(\"Success\")).catch(function (error) {\n      setInvalidLine(error);\n    });\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App-header\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"App\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        id: \"response\",\n        children: [\" \", /*#__PURE__*/_jsxDEV(CgArrowLongDownR, {\n          className: \"arrowDown\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 60,\n          columnNumber: 29\n        }, this), \" \"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 60,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: getLocation,\n        children: \"get location\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 61,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: status\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 62,\n        columnNumber: 9\n      }, this), lat && /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"Latitude: \", lat]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 63,\n        columnNumber: 17\n      }, this), lng && /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"Longitude: \", lng]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 64,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"Enter an MBTA Bus or Train Line:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 65,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        onChange: e => setMBTAInput(e.target.value),\n        value: MBTAInput\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 66,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 67,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: getLineData,\n        children: \"get MBTA line endpoints\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 68,\n        columnNumber: 9\n      }, this), MBTALine && !invalidLine && /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [MBTALine['data']['attributes']['direction_destinations'][0], \" - \", MBTALine['data']['attributes']['direction_destinations'][1]]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 69,\n        columnNumber: 38\n      }, this), invalidLine && /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"Error 404: Line named \\\"\", MBTAInput, \"\\\" not found\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 70,\n        columnNumber: 25\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 58,\n    columnNumber: 5\n  }, this);\n};\n\n_s(App, \"xxIXj2A3jog2PRk1fMb0eYbpQCw=\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["/Users/jaydenfont/Desktop/Code/School/cs411-project/frontend/demo/src/App.js"],"names":["React","useState","CgArrowLongDownR","axios","require","App","lat","setLat","lng","setLng","status","setStatus","MBTAInput","setMBTAInput","MBTALine","setMBTALine","invalidLine","setInvalidLine","getLocation","navigator","geolocation","getCurrentPosition","position","coords","latitude","longitude","pic","document","getElementById","innerHTML","getLineData","data","JSON","stringify","method","url","headers","then","response","Object","keys","console","log","catch","error","e","target","value"],"mappings":"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","sourcesContent":["import React, { useState } from 'react';\nimport { CgArrowLongDownR } from 'react-icons/cg';\nimport './App.css';\nvar axios = require(\"axios\");\n\nconst App = () => {\n  const [lat, setLat] = useState(null);\n  const [lng, setLng] = useState(null);\n  const [status, setStatus] = useState(null);\n  const [MBTAInput, setMBTAInput] = useState(\"\");\n  const [MBTALine, setMBTALine] = useState(null);\n  const [invalidLine, setInvalidLine] = useState(null);\n\n  const getLocation = () => {\n    if (!navigator.geolocation) {\n      setStatus('Geolocation is not supported by your browser');\n    } else {\n      navigator.geolocation.getCurrentPosition((position) => {\n        setStatus(null);\n        setLat(position.coords.latitude);\n        setLng(position.coords.longitude);\n      }, () => {\n        setStatus('Unable to retrieve your location');\n        var pic = document.getElementById(\"response\")\n        pic.innerHTML = '<img class=\"sad-response\" src=\"sad-face.png\"/>'\n      });\n    }\n  }\n  \n  // Takes in MBTAInput from state and POSTs to flask backend\n  const getLineData = () => {\n    var data = JSON.stringify({\n      \"line\": MBTAInput\n    });\n    axios({\n      method: \"post\",\n      url: \"http://127.0.0.1:5000/get_trains_by_line\",\n      data: data,\n      headers: {\n        'Content-Type': 'application/json'\n      }\n    })\n    .then(function (response) {\n      if (\"errors\" in Object.keys(response.data['response'])) {\n        return\n      }\n      setMBTALine(response.data['response']) \n      setInvalidLine(null)\n      console.log(MBTALine)\n    })\n    .then(console.log(\"Success\"))\n    .catch(function (error) {\n      setInvalidLine(error)\n    })\n  }\n\n  return (\n    <div className=\"App-header\">\n      <div className=\"App\">\n        <div id=\"response\"> <CgArrowLongDownR className=\"arrowDown\" /> </div>\n        <button onClick={getLocation}>get location</button>\n        <p>{status}</p>\n        {lat && <p>Latitude: {lat}</p>}\n        {lng && <p>Longitude: {lng}</p>}\n        <p>Enter an MBTA Bus or Train Line:</p>\n        <input type=\"text\" onChange={(e) => setMBTAInput(e.target.value)} value={MBTAInput}></input>\n        <p/>\n        <button onClick={getLineData}>get MBTA line endpoints</button>\n        {MBTALine && !invalidLine && <p>{MBTALine['data']['attributes']['direction_destinations'][0]} - {MBTALine['data']['attributes']['direction_destinations'][1]}</p>}\n        {invalidLine && <p>Error 404: Line named \"{MBTAInput}\" not found</p>}\n      </div>\n    </div>\n  );\n}\n\nexport default App;"]},"metadata":{},"sourceType":"module"}