{"ast":null,"code":"var _jsxFileName = \"/Users/jaydenfont/Desktop/Code/School/cs411-project/frontend/demo/src/App.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from 'react';\nimport { CgArrowLongDownR } from 'react-icons/cg';\nimport './App.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar axios = require(\"axios\");\n\nconst App = () => {\n  _s();\n\n  const [lat, setLat] = useState(null);\n  const [lng, setLng] = useState(null);\n  const [status, setStatus] = useState(null);\n  const [MBTALine, setMBTALine] = useState(null);\n\n  const getLocation = () => {\n    if (!navigator.geolocation) {\n      setStatus('Geolocation is not supported by your browser');\n    } else {\n      navigator.geolocation.getCurrentPosition(position => {\n        setStatus(null);\n        setLat(position.coords.latitude);\n        setLng(position.coords.longitude);\n      }, () => {\n        setStatus('Unable to retrieve your location');\n        var pic = document.getElementById(\"response\");\n        pic.innerHTML = '<img class=\"sad-response\" src=\"sad-face.png\"/>';\n      });\n    }\n  };\n\n  const getLineData = () => {\n    var data = JSON.stringify({\n      \"line\": \"Green-B\"\n    });\n    console.log(data);\n    var config = {\n      method: \"post\",\n      url: \"http://127.0.0.1:5000/get_trains_by_line\",\n      data: data,\n      headers: {\n        'Content-Type': 'application/json'\n      }\n    };\n    axios(config).then(function (response) {\n      setMBTALine(response.data['response']);\n      console.log(MBTALine);\n    }).then(console.log(\"Success\"));\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App-header\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"App\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        id: \"response\",\n        children: [\" \", /*#__PURE__*/_jsxDEV(CgArrowLongDownR, {\n          className: \"arrowDown\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 52,\n          columnNumber: 29\n        }, this), \" \"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 52,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: getLocation,\n        children: \"get location\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 53,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: status\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 54,\n        columnNumber: 9\n      }, this), lat && /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"Latitude: \", lat]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 55,\n        columnNumber: 17\n      }, this), lng && /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"Longitude: \", lng]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 56,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: getLineData,\n        children: \"Get Green Line-B Data\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 57,\n        columnNumber: 9\n      }, this), MBTALine && /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [MBTALine['data']['attributes']['direction_destinations'][0], \" - \", MBTALine['data']['attributes']['direction_destinations'][1]]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 58,\n        columnNumber: 16\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 50,\n    columnNumber: 5\n  }, this);\n};\n\n_s(App, \"KdlffF5PtETKkRLeth9MsGb8klk=\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["/Users/jaydenfont/Desktop/Code/School/cs411-project/frontend/demo/src/App.js"],"names":["React","useState","CgArrowLongDownR","axios","require","App","lat","setLat","lng","setLng","status","setStatus","MBTALine","setMBTALine","getLocation","navigator","geolocation","getCurrentPosition","position","coords","latitude","longitude","pic","document","getElementById","innerHTML","getLineData","data","JSON","stringify","console","log","config","method","url","headers","then","response"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AACA,SAASC,gBAAT,QAAiC,gBAAjC;AACA,OAAO,WAAP;;;AACA,IAAIC,KAAK,GAAGC,OAAO,CAAC,OAAD,CAAnB;;AAEA,MAAMC,GAAG,GAAG,MAAM;AAAA;;AAChB,QAAM,CAACC,GAAD,EAAMC,MAAN,IAAgBN,QAAQ,CAAC,IAAD,CAA9B;AACA,QAAM,CAACO,GAAD,EAAMC,MAAN,IAAgBR,QAAQ,CAAC,IAAD,CAA9B;AACA,QAAM,CAACS,MAAD,EAASC,SAAT,IAAsBV,QAAQ,CAAC,IAAD,CAApC;AACA,QAAM,CAACW,QAAD,EAAWC,WAAX,IAA0BZ,QAAQ,CAAC,IAAD,CAAxC;;AAEA,QAAMa,WAAW,GAAG,MAAM;AACxB,QAAI,CAACC,SAAS,CAACC,WAAf,EAA4B;AAC1BL,MAAAA,SAAS,CAAC,8CAAD,CAAT;AACD,KAFD,MAEO;AACLI,MAAAA,SAAS,CAACC,WAAV,CAAsBC,kBAAtB,CAA0CC,QAAD,IAAc;AACrDP,QAAAA,SAAS,CAAC,IAAD,CAAT;AACAJ,QAAAA,MAAM,CAACW,QAAQ,CAACC,MAAT,CAAgBC,QAAjB,CAAN;AACAX,QAAAA,MAAM,CAACS,QAAQ,CAACC,MAAT,CAAgBE,SAAjB,CAAN;AACD,OAJD,EAIG,MAAM;AACPV,QAAAA,SAAS,CAAC,kCAAD,CAAT;AACA,YAAIW,GAAG,GAAGC,QAAQ,CAACC,cAAT,CAAwB,UAAxB,CAAV;AACAF,QAAAA,GAAG,CAACG,SAAJ,GAAgB,gDAAhB;AACD,OARD;AASD;AACF,GAdD;;AAgBA,QAAMC,WAAW,GAAG,MAAM;AACxB,QAAIC,IAAI,GAAGC,IAAI,CAACC,SAAL,CAAe;AACxB,cAAQ;AADgB,KAAf,CAAX;AAGAC,IAAAA,OAAO,CAACC,GAAR,CAAYJ,IAAZ;AACA,QAAIK,MAAM,GAAG;AACXC,MAAAA,MAAM,EAAE,MADG;AAEXC,MAAAA,GAAG,EAAE,0CAFM;AAGXP,MAAAA,IAAI,EAAEA,IAHK;AAIXQ,MAAAA,OAAO,EAAE;AACP,wBAAgB;AADT;AAJE,KAAb;AAQAhC,IAAAA,KAAK,CAAC6B,MAAD,CAAL,CACCI,IADD,CACM,UAAUC,QAAV,EAAoB;AACxBxB,MAAAA,WAAW,CAACwB,QAAQ,CAACV,IAAT,CAAc,UAAd,CAAD,CAAX;AACAG,MAAAA,OAAO,CAACC,GAAR,CAAYnB,QAAZ;AACD,KAJD,EAKCwB,IALD,CAKMN,OAAO,CAACC,GAAR,CAAY,SAAZ,CALN;AAMD,GAnBD;;AAqBA,sBACE;AAAK,IAAA,SAAS,EAAC,YAAf;AAAA,2BACE;AAAK,MAAA,SAAS,EAAC,KAAf;AAAA,8BACE;AAAK,QAAA,EAAE,EAAC,UAAR;AAAA,qCAAoB,QAAC,gBAAD;AAAkB,UAAA,SAAS,EAAC;AAA5B;AAAA;AAAA;AAAA;AAAA,gBAApB;AAAA;AAAA;AAAA;AAAA;AAAA,cADF,eAEE;AAAQ,QAAA,OAAO,EAAEjB,WAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAFF,eAGE;AAAA,kBAAIJ;AAAJ;AAAA;AAAA;AAAA;AAAA,cAHF,EAIGJ,GAAG,iBAAI;AAAA,iCAAcA,GAAd;AAAA;AAAA;AAAA;AAAA;AAAA,cAJV,EAKGE,GAAG,iBAAI;AAAA,kCAAeA,GAAf;AAAA;AAAA;AAAA;AAAA;AAAA,cALV,eAME;AAAQ,QAAA,OAAO,EAAEkB,WAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cANF,EAOHd,QAAQ,iBAAI;AAAA,mBAAIA,QAAQ,CAAC,MAAD,CAAR,CAAiB,YAAjB,EAA+B,wBAA/B,EAAyD,CAAzD,CAAJ,SAAoEA,QAAQ,CAAC,MAAD,CAAR,CAAiB,YAAjB,EAA+B,wBAA/B,EAAyD,CAAzD,CAApE;AAAA;AAAA;AAAA;AAAA;AAAA,cAPT;AAAA;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,UADF;AAaD,CAxDD;;GAAMP,G;;KAAAA,G;AA0DN,eAAeA,GAAf","sourcesContent":["import React, { useState } from 'react';\nimport { CgArrowLongDownR } from 'react-icons/cg';\nimport './App.css';\nvar axios = require(\"axios\");\n\nconst App = () => {\n  const [lat, setLat] = useState(null);\n  const [lng, setLng] = useState(null);\n  const [status, setStatus] = useState(null);\n  const [MBTALine, setMBTALine] = useState(null);\n\n  const getLocation = () => {\n    if (!navigator.geolocation) {\n      setStatus('Geolocation is not supported by your browser');\n    } else {\n      navigator.geolocation.getCurrentPosition((position) => {\n        setStatus(null);\n        setLat(position.coords.latitude);\n        setLng(position.coords.longitude);\n      }, () => {\n        setStatus('Unable to retrieve your location');\n        var pic = document.getElementById(\"response\")\n        pic.innerHTML = '<img class=\"sad-response\" src=\"sad-face.png\"/>'\n      });\n    }\n  }\n\n  const getLineData = () => {\n    var data = JSON.stringify({\n      \"line\": \"Green-B\"\n    });\n    console.log(data)\n    var config = {\n      method: \"post\",\n      url: \"http://127.0.0.1:5000/get_trains_by_line\",\n      data: data,\n      headers: {\n        'Content-Type': 'application/json',\n      }\n    }\n    axios(config)\n    .then(function (response) {\n      setMBTALine(response.data['response'])\n      console.log(MBTALine)\n    })\n    .then(console.log(\"Success\"))\n  }\n\n  return (\n    <div className=\"App-header\">\n      <div className=\"App\">\n        <div id=\"response\"> <CgArrowLongDownR className=\"arrowDown\" /> </div>\n        <button onClick={getLocation}>get location</button>\n        <p>{status}</p>\n        {lat && <p>Latitude: {lat}</p>}\n        {lng && <p>Longitude: {lng}</p>}\n        <button onClick={getLineData}>Get Green Line-B Data</button>\n  {MBTALine && <p>{MBTALine['data']['attributes']['direction_destinations'][0]} - {MBTALine['data']['attributes']['direction_destinations'][1]}</p>}\n      </div>\n    </div>\n  );\n}\n\nexport default App;"]},"metadata":{},"sourceType":"module"}